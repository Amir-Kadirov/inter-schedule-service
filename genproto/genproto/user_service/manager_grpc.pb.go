// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: manager.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ManagerService_Create_FullMethodName     = "/user_service.ManagerService/Create"
	ManagerService_GetByID_FullMethodName    = "/user_service.ManagerService/GetByID"
	ManagerService_GetList_FullMethodName    = "/user_service.ManagerService/GetList"
	ManagerService_Update_FullMethodName     = "/user_service.ManagerService/Update"
	ManagerService_Delete_FullMethodName     = "/user_service.ManagerService/Delete"
	ManagerService_GetByGmail_FullMethodName = "/user_service.ManagerService/GetByGmail"
)

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerServiceClient interface {
	Create(ctx context.Context, in *CreateManager, opts ...grpc.CallOption) (*ManagerPrimaryKey, error)
	GetByID(ctx context.Context, in *ManagerPrimaryKey, opts ...grpc.CallOption) (*Manager, error)
	GetList(ctx context.Context, in *GetListManagerRequest, opts ...grpc.CallOption) (*GetListManagerResponse, error)
	Update(ctx context.Context, in *UpdateManagerRequest, opts ...grpc.CallOption) (*MGMessage, error)
	Delete(ctx context.Context, in *ManagerPrimaryKey, opts ...grpc.CallOption) (*MGMessage, error)
	GetByGmail(ctx context.Context, in *ManagerGmail, opts ...grpc.CallOption) (*ManagerPrimaryKey, error)
}

type managerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerServiceClient(cc grpc.ClientConnInterface) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) Create(ctx context.Context, in *CreateManager, opts ...grpc.CallOption) (*ManagerPrimaryKey, error) {
	out := new(ManagerPrimaryKey)
	err := c.cc.Invoke(ctx, ManagerService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetByID(ctx context.Context, in *ManagerPrimaryKey, opts ...grpc.CallOption) (*Manager, error) {
	out := new(Manager)
	err := c.cc.Invoke(ctx, ManagerService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetList(ctx context.Context, in *GetListManagerRequest, opts ...grpc.CallOption) (*GetListManagerResponse, error) {
	out := new(GetListManagerResponse)
	err := c.cc.Invoke(ctx, ManagerService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) Update(ctx context.Context, in *UpdateManagerRequest, opts ...grpc.CallOption) (*MGMessage, error) {
	out := new(MGMessage)
	err := c.cc.Invoke(ctx, ManagerService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) Delete(ctx context.Context, in *ManagerPrimaryKey, opts ...grpc.CallOption) (*MGMessage, error) {
	out := new(MGMessage)
	err := c.cc.Invoke(ctx, ManagerService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetByGmail(ctx context.Context, in *ManagerGmail, opts ...grpc.CallOption) (*ManagerPrimaryKey, error) {
	out := new(ManagerPrimaryKey)
	err := c.cc.Invoke(ctx, ManagerService_GetByGmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
// All implementations must embed UnimplementedManagerServiceServer
// for forward compatibility
type ManagerServiceServer interface {
	Create(context.Context, *CreateManager) (*ManagerPrimaryKey, error)
	GetByID(context.Context, *ManagerPrimaryKey) (*Manager, error)
	GetList(context.Context, *GetListManagerRequest) (*GetListManagerResponse, error)
	Update(context.Context, *UpdateManagerRequest) (*MGMessage, error)
	Delete(context.Context, *ManagerPrimaryKey) (*MGMessage, error)
	GetByGmail(context.Context, *ManagerGmail) (*ManagerPrimaryKey, error)
	mustEmbedUnimplementedManagerServiceServer()
}

// UnimplementedManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServiceServer struct {
}

func (UnimplementedManagerServiceServer) Create(context.Context, *CreateManager) (*ManagerPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedManagerServiceServer) GetByID(context.Context, *ManagerPrimaryKey) (*Manager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedManagerServiceServer) GetList(context.Context, *GetListManagerRequest) (*GetListManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedManagerServiceServer) Update(context.Context, *UpdateManagerRequest) (*MGMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedManagerServiceServer) Delete(context.Context, *ManagerPrimaryKey) (*MGMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedManagerServiceServer) GetByGmail(context.Context, *ManagerGmail) (*ManagerPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGmail not implemented")
}
func (UnimplementedManagerServiceServer) mustEmbedUnimplementedManagerServiceServer() {}

// UnsafeManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServiceServer will
// result in compilation errors.
type UnsafeManagerServiceServer interface {
	mustEmbedUnimplementedManagerServiceServer()
}

func RegisterManagerServiceServer(s grpc.ServiceRegistrar, srv ManagerServiceServer) {
	s.RegisterService(&ManagerService_ServiceDesc, srv)
}

func _ManagerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Create(ctx, req.(*CreateManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetByID(ctx, req.(*ManagerPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetList(ctx, req.(*GetListManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Update(ctx, req.(*UpdateManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).Delete(ctx, req.(*ManagerPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetByGmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerGmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetByGmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagerService_GetByGmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetByGmail(ctx, req.(*ManagerGmail))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerService_ServiceDesc is the grpc.ServiceDesc for ManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ManagerService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ManagerService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ManagerService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ManagerService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ManagerService_Delete_Handler,
		},
		{
			MethodName: "GetByGmail",
			Handler:    _ManagerService_GetByGmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}
