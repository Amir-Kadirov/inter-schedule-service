// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: supportteacher.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SupportTeacherService_Create_FullMethodName     = "/user_service.SupportTeacherService/Create"
	SupportTeacherService_GetByID_FullMethodName    = "/user_service.SupportTeacherService/GetByID"
	SupportTeacherService_GetList_FullMethodName    = "/user_service.SupportTeacherService/GetList"
	SupportTeacherService_Update_FullMethodName     = "/user_service.SupportTeacherService/Update"
	SupportTeacherService_Delete_FullMethodName     = "/user_service.SupportTeacherService/Delete"
	SupportTeacherService_GetByGmail_FullMethodName = "/user_service.SupportTeacherService/GetByGmail"
)

// SupportTeacherServiceClient is the client API for SupportTeacherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupportTeacherServiceClient interface {
	Create(ctx context.Context, in *CreateSupportTeacher, opts ...grpc.CallOption) (*SupportTeacherPrimaryKey, error)
	GetByID(ctx context.Context, in *SupportTeacherPrimaryKey, opts ...grpc.CallOption) (*SupportTeacher, error)
	GetList(ctx context.Context, in *GetListSupportTeacherRequest, opts ...grpc.CallOption) (*GetListSupportTeacherResponse, error)
	Update(ctx context.Context, in *UpdateSupportTeacherRequest, opts ...grpc.CallOption) (*STMessage, error)
	Delete(ctx context.Context, in *SupportTeacherPrimaryKey, opts ...grpc.CallOption) (*STMessage, error)
	GetByGmail(ctx context.Context, in *SupportTeacherGmail, opts ...grpc.CallOption) (*SupportTeacherPrimaryKey, error)
}

type supportTeacherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupportTeacherServiceClient(cc grpc.ClientConnInterface) SupportTeacherServiceClient {
	return &supportTeacherServiceClient{cc}
}

func (c *supportTeacherServiceClient) Create(ctx context.Context, in *CreateSupportTeacher, opts ...grpc.CallOption) (*SupportTeacherPrimaryKey, error) {
	out := new(SupportTeacherPrimaryKey)
	err := c.cc.Invoke(ctx, SupportTeacherService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportTeacherServiceClient) GetByID(ctx context.Context, in *SupportTeacherPrimaryKey, opts ...grpc.CallOption) (*SupportTeacher, error) {
	out := new(SupportTeacher)
	err := c.cc.Invoke(ctx, SupportTeacherService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportTeacherServiceClient) GetList(ctx context.Context, in *GetListSupportTeacherRequest, opts ...grpc.CallOption) (*GetListSupportTeacherResponse, error) {
	out := new(GetListSupportTeacherResponse)
	err := c.cc.Invoke(ctx, SupportTeacherService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportTeacherServiceClient) Update(ctx context.Context, in *UpdateSupportTeacherRequest, opts ...grpc.CallOption) (*STMessage, error) {
	out := new(STMessage)
	err := c.cc.Invoke(ctx, SupportTeacherService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportTeacherServiceClient) Delete(ctx context.Context, in *SupportTeacherPrimaryKey, opts ...grpc.CallOption) (*STMessage, error) {
	out := new(STMessage)
	err := c.cc.Invoke(ctx, SupportTeacherService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportTeacherServiceClient) GetByGmail(ctx context.Context, in *SupportTeacherGmail, opts ...grpc.CallOption) (*SupportTeacherPrimaryKey, error) {
	out := new(SupportTeacherPrimaryKey)
	err := c.cc.Invoke(ctx, SupportTeacherService_GetByGmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupportTeacherServiceServer is the server API for SupportTeacherService service.
// All implementations must embed UnimplementedSupportTeacherServiceServer
// for forward compatibility
type SupportTeacherServiceServer interface {
	Create(context.Context, *CreateSupportTeacher) (*SupportTeacherPrimaryKey, error)
	GetByID(context.Context, *SupportTeacherPrimaryKey) (*SupportTeacher, error)
	GetList(context.Context, *GetListSupportTeacherRequest) (*GetListSupportTeacherResponse, error)
	Update(context.Context, *UpdateSupportTeacherRequest) (*STMessage, error)
	Delete(context.Context, *SupportTeacherPrimaryKey) (*STMessage, error)
	GetByGmail(context.Context, *SupportTeacherGmail) (*SupportTeacherPrimaryKey, error)
	mustEmbedUnimplementedSupportTeacherServiceServer()
}

// UnimplementedSupportTeacherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSupportTeacherServiceServer struct {
}

func (UnimplementedSupportTeacherServiceServer) Create(context.Context, *CreateSupportTeacher) (*SupportTeacherPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSupportTeacherServiceServer) GetByID(context.Context, *SupportTeacherPrimaryKey) (*SupportTeacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedSupportTeacherServiceServer) GetList(context.Context, *GetListSupportTeacherRequest) (*GetListSupportTeacherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedSupportTeacherServiceServer) Update(context.Context, *UpdateSupportTeacherRequest) (*STMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSupportTeacherServiceServer) Delete(context.Context, *SupportTeacherPrimaryKey) (*STMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSupportTeacherServiceServer) GetByGmail(context.Context, *SupportTeacherGmail) (*SupportTeacherPrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGmail not implemented")
}
func (UnimplementedSupportTeacherServiceServer) mustEmbedUnimplementedSupportTeacherServiceServer() {}

// UnsafeSupportTeacherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupportTeacherServiceServer will
// result in compilation errors.
type UnsafeSupportTeacherServiceServer interface {
	mustEmbedUnimplementedSupportTeacherServiceServer()
}

func RegisterSupportTeacherServiceServer(s grpc.ServiceRegistrar, srv SupportTeacherServiceServer) {
	s.RegisterService(&SupportTeacherService_ServiceDesc, srv)
}

func _SupportTeacherService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupportTeacher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportTeacherServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportTeacherService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportTeacherServiceServer).Create(ctx, req.(*CreateSupportTeacher))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportTeacherService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportTeacherPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportTeacherServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportTeacherService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportTeacherServiceServer).GetByID(ctx, req.(*SupportTeacherPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportTeacherService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListSupportTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportTeacherServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportTeacherService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportTeacherServiceServer).GetList(ctx, req.(*GetListSupportTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportTeacherService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupportTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportTeacherServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportTeacherService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportTeacherServiceServer).Update(ctx, req.(*UpdateSupportTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportTeacherService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportTeacherPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportTeacherServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportTeacherService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportTeacherServiceServer).Delete(ctx, req.(*SupportTeacherPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportTeacherService_GetByGmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportTeacherGmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportTeacherServiceServer).GetByGmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupportTeacherService_GetByGmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportTeacherServiceServer).GetByGmail(ctx, req.(*SupportTeacherGmail))
	}
	return interceptor(ctx, in, info, handler)
}

// SupportTeacherService_ServiceDesc is the grpc.ServiceDesc for SupportTeacherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupportTeacherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.SupportTeacherService",
	HandlerType: (*SupportTeacherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SupportTeacherService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _SupportTeacherService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _SupportTeacherService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SupportTeacherService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SupportTeacherService_Delete_Handler,
		},
		{
			MethodName: "GetByGmail",
			Handler:    _SupportTeacherService_GetByGmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "supportteacher.proto",
}
