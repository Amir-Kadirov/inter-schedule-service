// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: group-many.proto

package schedule_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupManyService_Create_FullMethodName    = "/schedule_service.GroupManyService/Create"
	GroupManyService_ScheduleM_FullMethodName = "/schedule_service.GroupManyService/ScheduleM"
)

// GroupManyServiceClient is the client API for GroupManyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupManyServiceClient interface {
	Create(ctx context.Context, in *CreateGroupMany, opts ...grpc.CallOption) (*GMMessage, error)
	ScheduleM(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScheduleMonth, error)
}

type groupManyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupManyServiceClient(cc grpc.ClientConnInterface) GroupManyServiceClient {
	return &groupManyServiceClient{cc}
}

func (c *groupManyServiceClient) Create(ctx context.Context, in *CreateGroupMany, opts ...grpc.CallOption) (*GMMessage, error) {
	out := new(GMMessage)
	err := c.cc.Invoke(ctx, GroupManyService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManyServiceClient) ScheduleM(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScheduleMonth, error) {
	out := new(ScheduleMonth)
	err := c.cc.Invoke(ctx, GroupManyService_ScheduleM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupManyServiceServer is the server API for GroupManyService service.
// All implementations must embed UnimplementedGroupManyServiceServer
// for forward compatibility
type GroupManyServiceServer interface {
	Create(context.Context, *CreateGroupMany) (*GMMessage, error)
	ScheduleM(context.Context, *Empty) (*ScheduleMonth, error)
	mustEmbedUnimplementedGroupManyServiceServer()
}

// UnimplementedGroupManyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupManyServiceServer struct {
}

func (UnimplementedGroupManyServiceServer) Create(context.Context, *CreateGroupMany) (*GMMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGroupManyServiceServer) ScheduleM(context.Context, *Empty) (*ScheduleMonth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleM not implemented")
}
func (UnimplementedGroupManyServiceServer) mustEmbedUnimplementedGroupManyServiceServer() {}

// UnsafeGroupManyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupManyServiceServer will
// result in compilation errors.
type UnsafeGroupManyServiceServer interface {
	mustEmbedUnimplementedGroupManyServiceServer()
}

func RegisterGroupManyServiceServer(s grpc.ServiceRegistrar, srv GroupManyServiceServer) {
	s.RegisterService(&GroupManyService_ServiceDesc, srv)
}

func _GroupManyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupMany)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupManyService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManyServiceServer).Create(ctx, req.(*CreateGroupMany))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManyService_ScheduleM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManyServiceServer).ScheduleM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupManyService_ScheduleM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManyServiceServer).ScheduleM(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupManyService_ServiceDesc is the grpc.ServiceDesc for GroupManyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupManyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule_service.GroupManyService",
	HandlerType: (*GroupManyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GroupManyService_Create_Handler,
		},
		{
			MethodName: "ScheduleM",
			Handler:    _GroupManyService_ScheduleM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group-many.proto",
}
